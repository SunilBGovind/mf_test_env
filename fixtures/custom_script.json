[
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Training Event",
  "modified": "2020-05-12 18:28:44.901834",
  "name": "Training Event-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Training Event', {\n    refresh: function(frm) {\n        if(!frm.doc.__islocal){\n        \tdashboard_link_doctype(frm, \"Training Effectiveness\");\n        }\n    },\n    employees_on_form_rendered: function(frm,cdt,cdn){\n        frm.fields_dict['employees'].grid.wrapper.find('.grid-delete-row').hide();\n    },\n    training_program: function(frm){\n        frm.set_value(\"employees\",\"\")\n        frappe.call({\n            \"method\": \"negentropy.negentropy_hr.api.populate_employee_from_training_effectiveness\",\n            args:{\n                \"training_program\": frm.doc.training_program\n            },\n            callback: function(r){\n                if(r.message){\n                    $.each(r.message, function (i, emp_list) {\n                        $.each(emp_list, function (i, d) {\n                            var row = frappe.model.add_child(frm.doc, \"Training Event Employee\", \"employees\");\n                            row.employee = d.employee;\n                            row.employee_name = d.employee_name;\n                            row.department = d.department;\n                            row.status = \"Open\";\n                            row.attendance= \"Mandatory\";\n                            row.from_training_effectiveness = d.parent;\n                        })\n                    })\n                    refresh_field(\"employees\")\n                }\n                \n            }\n        })\n    },\n    validate: function(frm){\n        frm.set_df_property(\"training_program\",\"read_only\",\"1\")\n    }\n});\n\nfrappe.ui.form.on('Training Event Employee', {\n    before_employees_remove: function(frm,cdt,cdn){\n        var row = locals[cdt][cdn]\n        var idx = []\n        var selected_children = frm.get_field('employees').grid.get_selected_children()\n        for(var i=0;i<selected_children.length;i++) {\n            if(selected_children[i].from_training_effectiveness){\n                idx.push(selected_children[i].idx)\n            }\n        }\n        if(idx.length!=0){\n            frappe.throw(\"Cannot Delete Employees populated from Training Effectiveness\")\n        }\n    }\n    \n})\n\n\n   function dashboard_link_doctype(frm, doctype){\n\n    \tvar parent = $('.form-dashboard-wrapper [data-doctype=\"Training Feedback\"]').closest('div').parent();\n    \t\n    \tparent.find('[data-doctype=\"'+doctype+'\"]').remove();\n\n    \tparent.append(frappe.render_template(\"dashboard_link_doctype\", {doctype:doctype,docstatus:frm.doc.docstatus}));\n\n    \tvar self = parent.find('[data-doctype=\"'+doctype+'\"]');\n    \tset_open_count(frm, doctype);\n\n        // bind links\n    \tself.find(\".badge-link\").on('click', function(){\n            frappe.route_options = {\n                \"training_event\": frm.doc.name\n            }\n            frappe.set_route(\"List\", doctype);\n        });\n\n        // bind open notifications\n         self.find('.open-notification').on('click', function(){\n            frappe.route_options = {\n              \"training_event\": frm.doc.name,\n              \"docstatus\": 0\n            }\n            frappe.set_route(\"List\", doctype);\n          });\n\n          // bind new\n          if (frappe.model.can_create(doctype)){\n            self.find('.btn-new').removeClass('hidden');\n          }\n          self.find('.btn-new').on('click', function(){\n            if(frm.doc.event_status == \"Completed\"){\n                frappe.new_doc(doctype,\n                {\n                  \"training_event\": frm.doc.name\n                });\n            }else{\n                frappe.new_doc(doctype,\n                {\n\n                });\n            }\n          });\n          \n          \n          function set_open_count(frm, doctype){\n           var method = '';\n        \tvar links = {};\n    \n        \tif(doctype==\"Training Effectiveness\"){\n        \t\tmethod = 'negentropy.negentropy_hr.doctype.training_effectiveness.training_effectiveness.get_open_count';\n        \t}\n    \n        \tif(method!=\"\"){\n        \t\tfrappe.call({\n        \t\t\ttype: \"GET\",\n        \t\t\tmethod: method,\n        \t\t\targs: {\n        \t\t\t\tname: frm.doc.name,\n        \t\t\t},\n        \t\t\tcallback: function(r) {\n        \t\t\t\t// update badges\n        \t\t\t\t$.each(r.message.count, function(i, d) {\n        \t\t\t\t\tfrm.dashboard.set_badge_count(d.name, cint(d.open_count), cint(d.count));\n        \t\t\t\t});\n        \t\t\t}\n        \t\t});\n        \t}\n        }\n                \n    }\n    \n   frappe.templates[\"dashboard_link_doctype\"] = ' \\\n    \t<div class=\"document-link\" data-doctype=\"{{ doctype }}\"> \\\n    \t<a class=\"badge-link small\">{{ __(doctype) }}</a> \\\n    \t<span class=\"text-muted small count\"></span> \\\n    \t<span class=\"open-notification hidden\" title=\"{{ __(\"Open {0}\", [__(doctype)])}}\"></span> \\\n    \t\t<button class=\"btn btn-new btn-default btn-xs hidden\" data-doctype=\"{{ doctype }}\"> \\\n    \t\t\t{% if docstatus==1 %}<i class=\"octicon octicon-plus\" style=\"font-size: 12px;\"></i> {% endif %}\\\n    \t\t</button>\\\n    \t</div>';\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Quotation",
  "modified": "2020-05-12 18:28:44.782030",
  "name": "Quotation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Quotation', {\n\tonload(frm){\n\t\tcheck_manufacture_feasibility_status(frm);\n\t},\n\tparty_name: function(frm) {\n\t\tcheck_manufacture_feasibility_status(frm);\n\t},\n\tbefore_submit: function(frm) {\n\t\tcheck_manufacture_feasibility_status(frm);\n\t}\n})\n\nfunction check_manufacture_feasibility_status (frm) {\n\tvar opportunity_number;\n\tvar manufacture_feasibility_number;\n\t\n\tif(frm.doc.quotation_to && frm.doc.party_name) {\n\t    opportunity_number = fetch_opportunity_number(frm);\n\t    if(opportunity_number != 'undefined') {\n\t       manufacture_feasibility_number = fetch_manufacture_feasibility_number(opportunity_number);\n\t       if(manufacture_feasibility_number == 'undefined'){\n\t           frappe.msgprint(\"Manufacuturing Feasibility is needs to complete for  \" + frm.doc.party_name);\n\t           frm.set_value(\"party_name\", \"\");\n\t           frm.set_value(\"customer_name\", \"\");\n\t           frm.clear_table(\"items\");\n\t       }\n\t    } else {\n\t        frappe.msgprint(\"Opportunity has to create for  \" + frm.doc.party_name);\n\t        frm.set_value(\"party_name\", \"\");\n\t        frm.set_value(\"customer_name\", \"\");\n\t        frm.clear_table(\"items\");\n\t    }\n\t}\n}\n\nfunction fetch_opportunity_number(frm) {\n    var opportunity_number;\n    frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                doctype: \"Opportunity\",\n                filters:{\n                    opportunity_from: frm.doc.quotation_to,\n                    party_name: frm.doc.party_name,\n                    docstatus: [\"!=\", 2]\n                    \n                },\n                fieldname: [\"name\"]\n            },\n            async: false,\n            callback: function(r) {\n                if(r.message) {\n                    opportunity_number = r.message.name;    \n                } else {\n                 opportunity_number = 'undefined';\n                }\n                \n            }\n    })\n    return opportunity_number;\n}\n\nfunction fetch_manufacture_feasibility_number(opportunity_number) {\n    var manufacture_feasibility_number;\n    frappe.call({\n            method: \"frappe.client.get_value\",\n            args: {\n                doctype: \"Manufacturing Feasibility\",\n                filters:{\n                    opportunity_number: opportunity_number,\n                    status: [\"!=\", 'Stage 1 Pending'],\n                    docstatus: [\"!=\", 2]\n                },\n                fieldname: [\"name\"]\n            },\n            async: false,\n            callback: function(r) {\n                if(r.message) {\n                    manufacture_feasibility_number = r.message.name;    \n                } else {\n                    manufacture_feasibility_number ='undefined';\n                }\n                \n            }\n    })\n    return manufacture_feasibility_number;\n}\n\n\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Lead",
  "modified": "2019-08-21 15:18:35.682446",
  "name": "Lead-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Lead', {\n\trefresh(frm) {\n\t\tfrm.set_df_property('source', 'reqd', 1);\n\t\tfrm.set_df_property('lead_owner', 'reqd', 1);\n\t\tfrm.set_df_property('company_name', 'reqd', 1);\n\t\tfrm.set_df_property('lead_category', 'reqd', 1);\n\t\tif(frappe.user_roles.indexOf('Sales Manager') > -1){\n    \t\tfrm.set_df_property('status', 'read_only', 0);\n\t\t}\n\t},\n\tvalidate(frm) {\n\t\tfrm.set_df_property('source', 'reqd', 1);\n\t\tfrm.set_df_property('lead_owner', 'reqd', 1);\n\t\tfrm.set_df_property('company_name', 'reqd', 1);\n\t\tfrm.set_df_property('lead_category', 'reqd', 1);\n\t}\n})"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Sales Order",
  "modified": "2020-05-12 18:28:44.829758",
  "name": "Sales Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Sales Order', {\n    before_submit: function(frm) {\n        fetch_opportunity(frm);\n    }\n})\n\nfunction fetch_opportunity(frm) {\n    frappe.call({\n        method: \"negentropy.negentropy_crm.doctype.manufacturing_feasibility.manufacturing_feasibility.fetch_opportunity_number\",\n        args: {\n            \"sales_order_id\": cur_frm.doc.name\n        },\n        callback: function(d) {\n            if (d.message) {\n                frappe.call({\n                    method: \"negentropy.negentropy_crm.doctype.manufacturing_feasibility.manufacturing_feasibility.fetch_manufacturing_feasibility\",\n                    args: {\n                        \"sales_order_id\": cur_frm.doc.name\n                    },\n                    callback: function(s) {\n                        frappe.call({\n                            method: \"frappe.client.get_value\",\n                            args: {\n                                doctype: \"Manufacturing Feasibility\",\n                                filters: {\n                                    name: s.message,\n                                    stage: [\"=\", 'Order Handling Stage'],\n                                    status: [\"=\", 'Stage 2 Completed'],\n\t\t\t\t    docstatus: [\"!=\", 2]\n                                },\n                                fieldname: [\"name\"]\n                            },\n                            callback: function(r) {\n                                if (r.message == undefined) {\n                                    frappe.validated = false;\n                                    frappe.confirm(\n                                        ' Manufacturing Feasibility Order Handling Stage needs to Complete, Are you ready ? ',\n                                        function() {\n                                            call_manufacturing_feasibility(frm)\n                                        },\n                                        function() {\n                                            show_alert('Thanks for continue here!')\n                                        }\n                                    )\n                                } else {\n                                    return true;\n                                }\n\n                            }\n                        });\n                    }\n                });\n            } else {\n                return true;\n            }\n        }\n    })\n}\n\nfunction call_manufacturing_feasibility(frm) {\n    frappe.call({\n        method: \"negentropy.negentropy_crm.doctype.manufacturing_feasibility.manufacturing_feasibility.fetch_manufacturing_feasibility\",\n        args: {\n            \"sales_order_id\": cur_frm.doc.name\n        },\n        callback: function(r) {\n            frappe.call({\n                method: \"negentropy.negentropy_crm.doctype.manufacturing_feasibility.manufacturing_feasibility.update_manufacturing_feasibility\",\n                args: {\n                    \"name\": r.message\n                },\n                async: false,\n                callback: function(r) {\n                    frm.refresh();\n                }\n            });\n            frappe.set_route(\"Form\", \"Manufacturing Feasibility\", r.message);\n        }\n    })\n}\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Opportunity",
  "modified": "2020-05-12 18:28:43.876566",
  "name": "Opportunity-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Opportunity', {\n    refresh(frm) {\n        if (!frm.doc.__islocal) {\n            enable_custom_buttons(frm);\n        }\n    }\n});\n\nfunction enable_custom_buttons(frm) {\n    if (frm.custom_buttons['Quotation'] == undefined) {\n        frm.add_custom_button(__('Quotation'), __(\"Create\"));\n    } else {\n        cur_frm.custom_buttons[\"Quotation\"][0].onclick = function() {\n            var opportunity_id = cur_frm.doc.name;\n            var status = fetch_manufacture_feasibility_status(opportunity_id);\n            if (status == undefined) {\n                frappe.validated = false;\n            } else if (status.status == 'Stage 1 Pending') {\n                frappe.msgprint(status.name + \" Manufacturing Feasibility is done for this Opportunity Document and it is needs to be Submitted\");\n                frappe.set_route(\"Form\", \"Manufacturing Feasibility\", status.name);\n            } else if (status.status == 'Stage 1 Completed' || status.status == 'Stage 2 Completed') {\n                frappe.model.open_mapped_doc({\n                    method: \"erpnext.crm.doctype.opportunity.opportunity.make_quotation\",\n                    frm: cur_frm\n                });\n\n            }\n\n        }\n    }\n    if (frm.custom_buttons['Manufacturing Feasibility'] == undefined) {\n        frm.add_custom_button(__('Manufacturing Feasibility'), function() {\n            var opportunity_id = cur_frm.doc.name;\n            var status = fetch_manufacture_feasibility_status(opportunity_id);\n            if (status == undefined) {\n                frappe.model.open_mapped_doc({\n                    method: \"negentropy.negentropy_crm.doctype.manufacturing_feasibility.manufacturing_feasibility.make_manufacturing_feasibility\",\n                    frm: cur_frm\n                })\n            } else if (status.status == 'Stage 1 Pending') {\n                frappe.msgprint(status.name + ' Manufacturing Feasibility of Opportunity Stage needs to compleate');\n                frappe.set_route(\"Form\", \"Manufacturing Feasibility\", status.name);\n            } else if (status.status == 'Stage 1 Completed' || status.status == 'Stage 2 Completed') {\n                frappe.throw(status.name + ' Manufacturing Feasibility is completed for this opportunity');\n                return false;\n            } else {\n\n                return true;\n            }\n        }, __(\"Create\"));\n    }\n    if (frm.custom_buttons['Risk Analysis'] == undefined) {\n        frm.add_custom_button(__('Risk Analysis'), function() {\n            create_risk_analysis(frm);\n        }, __(\"Create\"));\n    }\n}\n\nfunction fetch_manufacture_feasibility_status(opportunity_id) {\n    var status = {};\n    frappe.call({\n        method: \"frappe.client.get_value\",\n        args: {\n            doctype: \"Manufacturing Feasibility\",\n            filters: {\n                opportunity_number: [\"=\", opportunity_id],\n                docstatus: [\"!=\", 2]\n            },\n            fieldname: [\"name\", \"status\"]\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                status = {\n                    \"status\": r.message.status,\n                    \"name\": r.message.name\n                };\n            } else {\n                status = undefined;\n            }\n\n        }\n    });\n    return status;\n}\n\n// fetching risk analysis transaction status using in-build frappe API\nfunction fetch_risk_analysis_status(opportunity_id) {\n    var status = {};\n    frappe.call({\n        method: \"frappe.client.get_value\",\n        args: {\n            doctype: \"Risk Analysis\",\n            filters: {\n                opportunity_number: [\"=\", opportunity_id],\n                docstatus: [\"!=\", 2]\n\n            },\n            fieldname: [\"name\", \"docstatus\"]\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                status = {\n                    \"status\": r.message.docstatus,\n                    \"name\": r.message.name\n                };\n            } else {\n                status = undefined;\n            }\n\n        }\n    });\n    return status;\n};\n\nfunction create_risk_analysis(frm) {\n    var opportunity_id = cur_frm.doc.name;\n    var risk_analysis = fetch_risk_analysis_status(opportunity_id);\n    if (risk_analysis == undefined) {\n        frappe.model.open_mapped_doc({\n            method: \"negentropy.negentropy_crm.utils.make_risk_analysis\",\n            frm: frm\n        })\n    } else if (risk_analysis.status == 0) {\n        frappe.msgprint(risk_analysis.name + ' Risk Analysis is completed for this opportunity and it is needs to submit');\n        frappe.set_route(\"Form\", \"Risk Analysis\", risk_analysis.name);\n    } else if (risk_analysis.status == 1) {\n        frappe.throw(risk_analysis.name + ' Risk Analysis is completed for this opportunity');\n        return false;\n    }\n};\n"
 },
 {
  "docstatus": 0,
  "doctype": "Custom Script",
  "dt": "Issue",
  "modified": "2019-08-16 19:39:43.476540",
  "name": "Issue-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Issue', {\n\tvalidate(frm) {\n\t\tif(frm.doc.status=='Closed'){\n\t\t    frm.set_df_property('resolution_details', 'reqd', 1);\n\t\t    frm.set_df_property('issue_type', 'reqd', 1);\n\t\t    frm.set_df_property('priority', 'reqd', 1);\n\t\t    \n\t\t}\n\t}\n})"
 }
]